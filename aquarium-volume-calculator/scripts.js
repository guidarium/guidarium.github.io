class TankInput{constructor(e,l){this.value=Number(e),this.unit=String(l),(null===this.value||isNaN(this.value)||this.value<0)&&(this.value=0)}}let volume,length,width,height,diameter,radius,side1,side2,side3,longWidth,circumference,lidCircumference,toCalculate,BASE={dist:"cm",vol:"cm3"},UNITS={dist:{cm:1,m:100,inch:2.54,ft:30.48},vol:{cm3:1,l:1e3,m3:1e6,inch3:16.387064,gal:3785.411784,ft3:28316.846592}};function Log(t,e){e?(console.log(`%c ${String(t)}`,"background: #222; color: #bada55; font-size:25px"),console.table(e)):console.log(`%c ${String(t)}`,"background: #222; color: #0d69f2; font-size:25px")}function check(){Log("Checking",{volume,length,width,height,diameter,radius,side1,side2,side3,longWidth,circumference,lidCircumference})}function TANK(t,e,l="volume"){let a=structuredClone(e);switch(toCalculate=l,a[l].value=0,({volume,length,width,height,diameter,radius,side1,side2,side3,longWidth,circumference,lidCircumference}=a),t){case"cube":new Cube(volume,length);break;case"cuboid":new Cuboid(volume,length,width,height);break;case"cylinder":new Cylinder(volume,diameter,height);break;case"halfCylinder":new HalfCylinder(volume,diameter,height);break;case"quarterCylinder":new QuarterCylinder(volume,radius,height);break;case"triangularPrism":new TriangularPrism(volume,side1,side2,side3,height);break;case"triangularPrismRA":new TriangularPrismRA(volume,side1,height);break;case"bowFront":new BowFront(volume,length,width,longWidth,height);break;case"cornerPentagon":new CornerPentagon(volume,length,width,height);break;case"hexagon":new Hexagon(volume,width,height);break;case"flatBackHexagon":new FlatBackHex(volume,length,width,side1,side2,height);break;case"lShaped":new LShaped(volume,length,width,side1,side2,height);break;case"bowl":new Bowl(volume,circumference,lidCircumference,height);break;default:throw'"Tank Type" is wrong or missing'}return a}function hasEnoughInputs(t){let e=0;return t.forEach(l=>{l.value>0||e++}),!(e>1)}function convert_to_base(t,...e){let l="cm"===t?UNITS.dist:UNITS.vol;e.forEach(a=>{a.value=a.value*l[a.unit]})}function convert_to_original(t,...e){let l="cm"===t?UNITS.dist:UNITS.vol;e.forEach(a=>{a.value=a.value/l[a.unit],a.value=Number(a.value.toFixed(2))})}function FillDepth(t,e,l){let a=.01*t,s=l*a;return{volume:Number((e*a).toFixed(2)),height:Number(s.toFixed(2))}}class Tank{constructor([...e]){if(!hasEnoughInputs(e))throw"You cannot leave the required fields empty";const l=e[0],a=e.slice(1);convert_to_base(BASE.vol,l),convert_to_base(BASE.dist,...a),this.calculate(),convert_to_original(BASE.vol,l),convert_to_original(BASE.dist,...a)}}class Cube extends Tank{constructor(e,l){super(arguments)}calculate(){"length"===toCalculate?length.value=Math.cbrt(volume.value):volume.value=Math.pow(length.value,3)}}class Cuboid extends Tank{constructor(e,l,a,u){super(arguments)}calculate(){"length"===toCalculate&&(length.value=volume.value/(width.value*height.value)),"width"===toCalculate&&(width.value=volume.value/(length.value*height.value)),"height"===toCalculate?height.value=volume.value/(length.value*width.value):volume.value=length.value*width.value*height.value}}class Cylinder extends Tank{constructor(e,l,a){super(arguments)}calculate(){"diameter"===toCalculate&&(diameter.value=2*Math.sqrt(volume.value/(Math.PI*height.value))),"height"===toCalculate?height.value=volume.value/(Math.PI*(diameter.value/2)**2):volume.value=Math.PI*(diameter.value/2)**2*height.value}}class HalfCylinder extends Tank{constructor(e,l,a){super(arguments)}calculate(){"diameter"===toCalculate&&(diameter.value=2*Math.sqrt(2*volume.value/(Math.PI*height.value))),"height"===toCalculate?height.value=2*volume.value/(Math.PI*(diameter.value/2)**2):volume.value=.5*Math.PI*(diameter.value/2)**2*height.value}}class QuarterCylinder extends Tank{constructor(e,l,a){super(arguments)}calculate(){"radius"===toCalculate&&(radius.value=Math.sqrt(4*volume.value/(Math.PI*height.value))),"height"===toCalculate?height.value=4*volume.value/(Math.PI*radius.value**2):volume.value=.25*Math.PI*radius.value**2*height.value}}class TriangularPrism extends Tank{constructor(e,l,a,u,s){super(arguments)}calculate(){const e=(side1.value+side2.value+side3.value)/2,l=Math.sqrt(e*(e-side1.value)*(e-side2.value)*(e-side3.value));"height"===toCalculate?height.value=volume.value/l:volume.value=l*height.value}}class TriangularPrismRA extends Tank{constructor(e,l,a){super(arguments)}calculate(){const e=.5*side1.value*side1.value;"side1"===toCalculate?side1.value=Math.pow(Math.pow(side3.value,2)-Math.pow(side2.value,2),.5):"height"===toCalculate?height.value=volume.value/e:volume.value=e*height.value}}class BowFront extends Tank{constructor(e,l,a,u,s){super(arguments)}calculate(){const e=Math.PI*(length.value/2)*(longWidth.value-width.value)/2+length.value*width.value;"height"===toCalculate?height.value=volume.value/e:volume.value=e*height.value}}class CornerPentagon extends Tank{constructor(e,l,a,u){super(arguments)}calculate(){const a=length.value**2-.5*(length.value-width.value)**2;"height"===toCalculate?height.value=volume.value/a:volume.value=a*height.value}}class Hexagon extends Tank{constructor(e,l,a){super(arguments)}calculate(){const e=width.value/(2*Math.tan(Math.PI/6));"height"===toCalculate?height.value=volume.value/(3*e*width.value):volume.value=3*e*width.value*height.value}}class FlatBackHex extends Tank{constructor(e,l,a,u,s,r){super(arguments)}calculate(){const e=Math.sqrt(side2.value**2-((length.value-side1.value)/2)**2),u=length.value*width.value+(length.value+side1.value)*e/2;"height"===toCalculate?height.value=volume.value/u:volume.value=u*height.value}}class LShaped extends Tank{constructor(e,l,a,u,s,r){super(arguments)}calculate(){const u=length.value*side1.value+width.value*side2.value-side1.value*side2.value;"height"===toCalculate?height.value=volume.value/u:volume.value=u*height.value}}class Bowl extends Tank{constructor(e,l,a,u){super(arguments)}calculate(){const e=circumference.value/(2*Math.PI),l=4/3*Math.PI*e**3,a=2*e-height.value,u=Math.PI*a**2/3*(3*e-a);volume.value=l-u}}